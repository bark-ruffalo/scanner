---
description: Scanner - project info
globs:
alwaysApply: true
---

# About Scanner

The project is a WIP web app. The objective is to monitor various launchpads (crypto and traditional finance), aggregate launch information, use LLMs to summarize and evaluate them as potential investments, and offer filtering capabilities based on:

- Launchpad category (crypto vs traditional);
- Specific launchpads;
- LLM-generated rating;
- Tokenomics (e.g., creator token holdings and movements);
- Public token allocation percentage;
- etc.

## Tech Stack

- **Framework**: [Next.js](https://nextjs.org) (App Router)
- **Styling**: [Tailwind CSS v4](https://tailwindcss.com)
- **Database**: PostgreSQL
- **ORM**: [Drizzle ORM](https://orm.drizzle.team)
- **Language**: TypeScript
- **Environment Variables**: [T3 Env](https://env.t3.gg/) (Schema in `src/env.js`)
- **Linting/Formatting**: [Biome](https://biomejs.dev/)
- **Package Manager**: [pnpm](https://pnpm.io/)
- **Deployment**: [Render](https://render.com/)

## Project Structure

Always use the following command after a new chat has started in order to understand the project structure!

`tree -L 4 -a -I 'node_modules|.git|**pycache**|.DS_Store|pytest_cache|.vscode|.next|.cursor|.swc'`

## Data Models / Schema

The main data model is defined in `src/server/db/schema.ts` within the `launches` table. Key properties include:
- `id`: Unique identifier
- `launchpad`: Name of the launchpad
- `creatorAddress`: Address of the project creator/deployer (optional)
- `tokenAddress`: Contract address of the launched token (optional)
- `title`: Launch title
- `url`: Link to the launch page
- `description`: Original description/data gathered from the source (potentially augmented)
- `summary`: LLM-generated summary
- `analysis`: LLM-generated analysis
- `rating`: LLM-generated rating (-1 to 10)
- `imageUrl`: Optional image URL
- Tokenomics fields (`creatorTokenHoldingPercentage`, `creatorTokensHeld`, `creatorInitialTokensHeld`, `tokensForSale`, `creatorTokenMovementDetails`, `totalTokenSupply`, `sentToZeroAddress`, `mainSellingAddress`)
- Timestamps (`launchedAt`, `basicInfoUpdatedAt`, `tokenStatsUpdatedAt`, `llmAnalysisUpdatedAt`, `createdAt`, `updatedAt`)

## Important Notes (also regarding tool usage)
- Regarding styling with Tailwind CSS v4:
    - It's integrated via the `@tailwindcss/postcss` plugin configured in `postcss.config.js`.
    - Custom theme values (colors, fonts, etc.) are defined directly within `src/styles/globals.css` using the `@theme { ... }` directive. There is **no** `tailwind.config.js` file as used in Tailwind v3 and earlier.
- LLM calls are handled in `src/server/lib/ai-utils.ts`. Templates for prompts are in the `/templates` directory.
- New launch detection logic resides in `src/server/launchpads/`. The `instrumentation.ts` file registers these listeners to run on server start.
- For blockchain interactions for EVM chains use `viem`. The public clients (both HTTP for general queries and WebSocket for real-time events) are configured and exported from `src/server/lib/web3-client.ts`.
- Launchpad implementation (`src/server/launchpads/virtuals-base.ts`):
    - `startVirtualsBaseListener`: Starts WebSocket listener for 'Launched' events from the Virtuals Protocol factory contract on Base network.
    - `debugFetchHistoricalEvents`: Fetches and processes historical 'Launched' events within a specific block range for testing or backfilling.
    - `processLaunchedEvent`: Processes a single event by fetching token details, creator balances, and formatting a comprehensive description before adding to the database.
    - `fetchAdditionalContent`: Fetches additional information from various URLs mentioned in the project description and custom launchpad-specific links.
- Content utilities (`src/lib/content-utils.ts`):
    - `extractUrls`: Extracts all URLs from a text string using regex.
    - `fetchUrlContent`: Simple utility to fetch content from a URL.
    - `fetchFirecrawlContent`: Advanced content fetching using the Firecrawl API, with auto-detection between crawling a website and scraping a specific page.
    - `formatFetchedContent`: Formats fetched content with options for including URLs, combining content, and limiting length.
    - `LaunchpadLinkGenerator`: Interface for defining custom link generators for launchpads to provide additional content sources based on launch parameters.
    - `handleCrawlResponse` and `handleScrapeResponse`: Helper functions for processing different types of responses from the Firecrawl API.
- Common helper utilities (`src/lib/utils.ts`):
    - `linkify`: Parses a string to find URLs and returns an array of segments, marking URLs specifically so they can be rendered as links.
    - `formatTokenBalance`: Converts a raw BigInt token amount (like from a contract call) into a human-readable, comma-separated string, rounded to the nearest whole number.
    - `calculateBigIntPercentage`: Calculates the percentage between two BigInt numbers, returning the numeric percentage and a formatted string (e.g., "87.40%"). Handles potential division-by-zero.
- EVM utilities (`src/server/lib/evm-utils.ts`):
    - `updateEvmTokenStatistics`: Calculates creator token holding percentage, formats current balance, and analyzes significant outgoing transfers to detect potential sales (rug pulls), burns, or locking actions. Requires the token address, creator address, and initial token allocation. Can optionally take a pre-fetched current balance and a specific DEX/pair address to check against. Returns a `TokenUpdateResult` object.
    - `getEvmErc20BalanceAtBlock`: Fetches the ERC20 token balance for an address at a specific block number (or latest).
    - `addKnownEvmSellingAddress`: Allows dynamically adding addresses (like specific launchpad pairs) to the list of known selling destinations used by `updateEvmTokenStatistics`.
    - `isDestinationContract`: Helper function to check if an address is a contract.
    - The file also contains ERC20 ABIs, known lock contract addresses and DEX addresses for token movement analysis.
- `npm run dev` has been run, and it should be live on localhost:3000; remind me to start it myself if it's not and you need it; never run the command yourself, and if you want it restarted, ask for it.
- We do not plan to add authentication for users of this web app. Admin routes (`/admin/*`) are protected by Basic Auth configured via `src/middleware.ts` and environment variables.
- Environment variables are strictly validated at runtime using the T3 Env schema defined in `src/env.js`.
    - Configuration uses `runtimeEnv: process.env` (not `runtimeEnvStrict`) as Next.js provides `process.env` access.
    - `emptyStringAsUndefined: true` is set for better validation handling.
    - Currently, only `server` variables are defined. If client variables are needed, they *must* be prefixed `NEXT_PUBLIC_` (as defined in `src/env.js`) and added to the `client` schema section.
- After modifying the UI, you may use the `Playwright MCP` to confirm that the changes are as expected. Always close Playwright windows after use.
- When running in agent mode, after you finish modifying the code, always run the command `pnpm check:write` to improve code formatting and fix linting errors. Then, if there are still linting errors, fix them manually.
- Always use the full command specified in [Project Structure](#project-structure) to understand the project organization instead of listing the content of various folders one by one.
- Do not use template literals if interpolation and special-character handling are not needed.
- Use `pnpm` instead of `npm`.
- Never write code for database migration because I'll just do `pnpm db:push` instead
- All database queries must be centralized in the Data Access Layer (DAL) at `src/server/queries.ts`. Never write direct database queries in components or pages.
- Add many comments that ELI5 the parts of the code that are more difficult to understand. Additionally, often add comments valuable for technical people and coding AI agents.
- After you finish a task, update `.cursor/rules/project-info.mdc` with the latest information (for example, descriptions for new common helpers or EVM/SVM utilities). You may also edit `README.md` to add the completed task in the `Previously Completed` section, or update the `TODO` section with proposals for future tasks.
- The fewer lines of code, the better.
